;; test set!
(define y (lambda ()
            (define x 2) (define y 23)
            (set! x 1) (set! x 3) x (set! x 4)
            (let ((z (set! x 7)) (x x))
              (set! y (lambda (z) (+ x z)))
              (if (set! x 17) (if z (y 23))))))
(y)

(cond ((set! y 24) 
       (eq? ((lambda (z) (set! y 12) (- y z)) 6)
            (begin (define x 1) (set! x 2) (/ y x)))))

(define a 23)
(define c (set! a (+ a 1)))
(set! c (+ a 1))
a c
(set! a (set! a 2))
a 

(define b (letrec ((m (lambda () (set! m 55057) (n)))
(n (lambda () (set! n 23)))) (m) (+ m n)))
b

(let ((p 3) (q 4)) (set! p (+ q 1)) (set! q (+ p 1)) (+ p q))

;; test eq?
(eq? 23 23.0)
(eq? car car)
(eq? car cdr)

;; Knuth's test
(define a
  (lambda (k x1 x2 x3 x4 x5)
    (letrec ((b (lambda ()
                  (set! k (- k 1))
                  (a k b x1 x2 x3 x4))))
      (if (<= k 0)
          (+ (x4) (x5))
          (b)))))

(a 10 (lambda () 1) (lambda () -1) (lambda () -1) (lambda () 1) (lambda () 0))